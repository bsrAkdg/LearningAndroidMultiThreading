
** Instantiating New Threads : Two way
    ** Instantiated thread != started thread (you should call start())

    1. Create a class : (Inheritance)
        public class MyThread extends Thread {
            private final int mSeed;

            public MyThread(int seed) {
                mSeed = seed;
            }

            @Override
            public void run() {
                // perform some calculation
            }
        }

        Thread myCustomThread = new MyThread(10);
        myCustomThread.start(); // start thread

    2. User runnable : (Composition) This is a container for threads

        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                int seed = 10;
                // perform some calculation
            }
        }

        Thread thread = new Thread(runnable);
        thread.start(); // start thread

** Effective Java Item 18 : Favor Composition over Inheritance

** Important roots in Android application : (do not eligible GC)
    1. Objects referenced from static fields
    2. Instances of Application class* (custom subclass of application class)
    3. Live threads (thread.start())

        - Anonymous Threads : MainActivity instance can't be GC'ed as long as the anonymous Thread instance is live
            public class MainActivity ... {
                @Override
                protected void onCreate(){
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            // perform some long-running operation
                        }
                    }).start();
                }
            }
        - Inner Threads : MainActivity instance can't be GC'ed as long as the anonymous Thread instance is live

            public class MainActivity ... {
                @Override
                protected void onCreate(){
                    new MyThread().start();
                }

                private class MyThread extends Thread {
                    @Override
                    public void run() {
                        // perform some long-running operation
                    }
                }
            }

** Thread Termination Strategies

    1. Return from run() after successful execution :
    -------------------------------------------------
    Normally anonymous threads don't eligible GC,
    but anonymous Thread can access Activity's fields because it has implicit reference to the enclosing
    object.

        public class MainActivity ... {

            private EndPoint endPoint;
            private ItemsDao itemsDao;

            @Override
            protected void onCreate(){
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        List<Item> items = endPoint.fetch();
                        itemsDao.insertItems(items);
                    }
                }).start();
            }
        }

    2. Return from run() in response to internal error :
    ----------------------------------------------------
    When you return in an error there is no problem for memory leak.

         public class MainActivity ... {

            private EndPoint endPoint;
            private ItemsDao itemsDao;

            @Override
            protected void onCreate(){
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        List<Item> items;

                        try {
                            items = endPoint.fetch();
                        } catch (IOException e) {
                            return; // it's important!!
                        }
                        itemsDao.insertItems(items);
                    }
                }).start();
            }
         }

    3. Return from run() in response to externally set flag
    -------------------------------------------------------
    If the flag is changed after execution passed the condition that checks it, this will have no effect

         public class MainActivity ... {

            private EndPoint endPoint;
            private ItemsDao itemsDao;
            private AtomicBoolean fetchAborted = new AtomicBoolean(false); // it's a flag

            @Override
            protected void onCreate(){
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        List<Item> items = endPoint.fetch();
                        if (fetchAborted.get()) { // it's important!!
                            return;
                        }
                        itemsDao.insertItems(items);
                    }
                }).start();
            }
         }

    4. Return from run() in response to interruption
    ------------------------------------------------
    To interrupt a thread from outside, we need to have a reference to it.
    Thread interruption might look like externally set flag, but it's much more nuanced and complex mechanism.
    Favor externally set flag over thread interruption.

         public class MainActivity ... {

            private EndPoint endPoint;
            private ItemsDao itemsDao;
            private Thread thread;

            @Override
            protected void onCreate(){
                thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        List<Item> items = endPoint.fetch();
                        if (Thread.interrupted()) { // it's important!!
                            return;
                        }
                        itemsDao.insertItems(items);
                    }
                });
                thread.start();
            }
         }

** UI Thread Characteristics
    1. Started by Android Framework when application starts
    2. Terminated only when application's process terminates
    3. Application's user interface is "drawn" on UI thread
    4. Lifecycle callbacks (e.g onStart(), onStop()) are executed on UI thread
    5. User interaction event handlers are executed on UI thread
    6. Changes of user interface must be performed on UI thread

** UI Responsiveness Requirements :

   Android application should render 60 frames per seconds (FPS)
                            ||
                          \ || /
                            \/
   New frame each 16 milliseconds
                            ||
                          \ || /
                            \/
   Your code shouldn't execute on UI thread for longer than few milliseconds

** UI Responsiveness Warning Signs :

   1. Freezes of user interface, non-smooth animations, etc.
   2. Notifications about skipped frames in logcat :
        I/Choreographer : Skipped 611 frames! The application may be doing too much work on its main thread.
        611 frames * 16 ms = 10 seconds (too much work on UI thread)
   3. Crashes due to Application Not Responding (ANR) error

** Zero skipped frames in one of the fundamental quality standards of Android applications (can be relaxed for lowest-end devices)
** All time consuming operations should be offloaded to background threads

** If you want access views in main thread from background thread, you get CalledFromWrongThreadException :
   You have to pass value in main thread and set it views

     new Thread(() -> {
            long startTimestamp = System.currentTimeMillis();
            long endTimestamp = startTimestamp + ITERATIONS_COUNTER_DURATION_SEC * 1000;

            int iterationsCount = 0;
            while (System.currentTimeMillis() <= endTimestamp) {
                iterationsCount++;
            }

            Log.d(
                    "Exercise1",
                    "iterations in " + ITERATIONS_COUNTER_DURATION_SEC + "seconds: "
                            + iterationsCount
            );

            btn.setText("") // CalledFromWrongThreadException (You should use Handler : Look at UiHandlerDemonstrationFragment)
     }).start();

** UI thread is a special "looper" thread that Android framework starts for each application

** UI Thread Rules of Thumb
    1. Don't perform any long-running tasks on UI thread (longer than few milliseconds)
    2. Offload long-running tasks to background threads
    3. Return execution from background to UI thread for user interface manipulations
    4. Aim at zero skipped frames and watch for warning signs

** Most of your application's code should execute on UI thread : lifecycle, UI Interactions, navigation, etc

** Preemptive Multitasking Execution :

   instr0   instr1 instr2   instr3 .. instrN
                            1. stop
                            4. continue again

   instr0   instr1 instr2   instr3 .. instrN
   2. start                 3. stop

   If different threads don't access the same state, no special precautions are required.
   If more than one thread accesses the same part of program's tate (shared state), You need yo ensure "thread-safety".

** Thread Safety Concerns : Very complicated topic.
    - Visibility
    - Atomicity (look at VisibilityDemonstration.class)
    - Happens Before

**